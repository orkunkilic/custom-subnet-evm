// Code generated
// This file is a generated precompile contract with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

// There are some must-be-done changes waiting in the file. Each area requiring you to add your code is marked with CUSTOM CODE to make them easy to find and modify.
// Additionally there are other files you need to edit to activate your precompile.
// These areas are highlighted with comments "ADD YOUR PRECOMPILE HERE".
// For testing take a look at other precompile tests in core/stateful_precompile_test.go

/* General guidelines for precompile development:
1- Read the comment and set a suitable contract address in precompile/params.go. E.g:
	NonceAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
2- Set gas costs here
3- It is recommended to only modify code in the highlighted areas marked with "CUSTOM CODE STARTS HERE". Modifying code outside of these areas should be done with caution and with a deep understanding of how these changes may impact the EVM.
Typically, custom codes are required in only those areas.
4- Add your upgradable config in params/precompile_config.go
5- Add your precompile upgrade in params/config.go
6- Add your solidity interface and test contract to contract-examples/contracts
7- Write solidity tests for your precompile in contract-examples/test
8- Create your genesis with your precompile enabled in tests/e2e/genesis/
9- Create e2e test for your solidity test in tests/e2e/solidity/suites.go
10- Run your e2e precompile Solidity tests with './scripts/run_ginkgo.sh'

*/

package precompile

import (
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"

	"github.com/ethereum/go-ethereum/common"
)

const (
	GetNonceGasCost uint64 = 10_000 // SET A GAS COST HERE

	// NonceRawABI contains the raw ABI of Nonce contract.
	NonceRawABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = fmt.Printf
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	_ StatefulPrecompileConfig = &NonceConfig{}

	NonceABI abi.ABI // will be initialized by init function

	NoncePrecompile StatefulPrecompiledContract // will be initialized by init function

	// CUSTOM CODE STARTS HERE
	// THIS SHOULD BE MOVED TO precompile/params.go with a suitable hex address.
)

// NonceConfig implements the StatefulPrecompileConfig
// interface while adding in the Nonce specific precompile address.
type NonceConfig struct {
	UpgradeableConfig
}

func init() {
	parsed, err := abi.JSON(strings.NewReader(NonceRawABI))
	if err != nil {
		panic(err)
	}
	NonceABI = parsed

	NoncePrecompile = createNoncePrecompile(NonceAddress)
}

// NewNonceConfig returns a config for a network upgrade at [blockTimestamp] that enables
// Nonce .
func NewNonceConfig(blockTimestamp *big.Int) *NonceConfig {
	return &NonceConfig{

		UpgradeableConfig: UpgradeableConfig{BlockTimestamp: blockTimestamp},
	}
}

// NewDisableNonceConfig returns config for a network upgrade at [blockTimestamp]
// that disables Nonce.
func NewDisableNonceConfig(blockTimestamp *big.Int) *NonceConfig {
	return &NonceConfig{
		UpgradeableConfig: UpgradeableConfig{
			BlockTimestamp: blockTimestamp,
			Disable:        true,
		},
	}
}

// Equal returns true if [s] is a [*NonceConfig] and it has been configured identical to [c].
func (c *NonceConfig) Equal(s StatefulPrecompileConfig) bool {
	// typecast before comparison
	other, ok := (s).(*NonceConfig)
	if !ok {
		return false
	}
	// CUSTOM CODE STARTS HERE
	// modify this boolean accordingly with your custom NonceConfig, to check if [other] and the current [c] are equal
	// if NonceConfig contains only UpgradeableConfig  you can skip modifying it.
	equals := c.UpgradeableConfig.Equal(&other.UpgradeableConfig)
	return equals
}

// String returns a string representation of the NonceConfig.
func (c *NonceConfig) String() string {
	bytes, _ := json.Marshal(c)
	return string(bytes)
}

// Address returns the address of the Nonce. Addresses reside under the precompile/params.go
// Select a non-conflicting address and set it in the params.go.
func (c *NonceConfig) Address() common.Address {
	return NonceAddress
}

// Configure configures [state] with the initial configuration.
func (c *NonceConfig) Configure(_ ChainConfig, state StateDB, _ BlockContext) {

	// CUSTOM CODE STARTS HERE
}

// Contract returns the singleton stateful precompiled contract to be used for Nonce.
func (c *NonceConfig) Contract() StatefulPrecompiledContract {
	return NoncePrecompile
}

// Verify tries to verify NonceConfig and returns an error accordingly.
func (c *NonceConfig) Verify() error {

	// CUSTOM CODE STARTS HERE
	// Add your own custom verify code for NonceConfig here
	// and return an error accordingly
	return nil
}

// UnpackGetNonceInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetNonceInput(input []byte) (common.Address, error) {
	res, err := NonceABI.UnpackInput("getNonce", input)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackGetNonce packs [account] of type common.Address into the appropriate arguments for getNonce.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetNonce(account common.Address) ([]byte, error) {
	return NonceABI.Pack("getNonce", account)
}

// PackGetNonceOutput attempts to pack given nonce of type *big.Int
// to conform the ABI outputs.
func PackGetNonceOutput(nonce *big.Int) ([]byte, error) {
	return NonceABI.PackOutput("getNonce", nonce)
}

func getNonce(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, GetNonceGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetNonceInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetNonceInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	nonce := accessibleState.GetStateDB().GetNonce(inputStruct)

	output := new(big.Int).SetUint64(nonce)
	packedOutput, err := PackGetNonceOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createNoncePrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createNoncePrecompile(precompileAddr common.Address) StatefulPrecompiledContract {
	var functions []*statefulPrecompileFunction

	methodGetNonce, ok := NonceABI.Methods["getNonce"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodGetNonce.ID, getNonce))

	// Construct the contract with no fallback function.
	contract := newStatefulPrecompileWithFunctionSelectors(nil, functions)
	return contract
}
