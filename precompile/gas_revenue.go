// Code generated
// This file is a generated precompile contract with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

// There are some must-be-done changes waiting in the file. Each area requiring you to add your code is marked with CUSTOM CODE to make them easy to find and modify.
// Additionally there are other files you need to edit to activate your precompile.
// These areas are highlighted with comments "ADD YOUR PRECOMPILE HERE".
// For testing take a look at other precompile tests in core/stateful_precompile_test.go

/* General guidelines for precompile development:
1- Read the comment and set a suitable contract address in precompile/params.go. E.g:
	GasRevenueAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
2- Set gas costs here
3- It is recommended to only modify code in the highlighted areas marked with "CUSTOM CODE STARTS HERE". Modifying code outside of these areas should be done with caution and with a deep understanding of how these changes may impact the EVM.
Typically, custom codes are required in only those areas.
4- Add your upgradable config in params/precompile_config.go
5- Add your precompile upgrade in params/config.go
6- Add your solidity interface and test contract to contract-examples/contracts
7- Write solidity tests for your precompile in contract-examples/test
8- Create your genesis with your precompile enabled in tests/e2e/genesis/
9- Create e2e test for your solidity test in tests/e2e/solidity/suites.go
10- Run your e2e precompile Solidity tests with './scripts/run_ginkgo.sh'

*/

package precompile

import (
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/vmerrs"

	"github.com/ethereum/go-ethereum/common"
)

const (
	BalanceOfGasCost     uint64 = 10_000
	GetPercentageGasCost uint64 = 10_000
	IsRegisteredGasCost  uint64 = 10_000
	RegisterGasCost      uint64 = 30_000
	WithdrawGasCost      uint64 = 50_000

	PercentageDenominator = 1000

	// GasRevenueRawABI contains the raw ABI of GasRevenue contract.
	GasRevenueRawABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumIGasRevenue.Target\",\"name\":\"target\",\"type\":\"uint8\"}],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = fmt.Printf
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	_ StatefulPrecompileConfig = &GasRevenueConfig{}

	ErrAlreadyRegistered = errors.New("contract already registered")
	ErrNotRegistered     = errors.New("contract not registered")
	ErrNotSmartContract  = errors.New("caller is not a smart contract")

	GasRevenueABI abi.ABI // will be initialized by init function

	GasRevenuePrecompile StatefulPrecompiledContract // will be initialized by init function

	// CUSTOM CODE STARTS HERE
	// THIS SHOULD BE MOVED TO precompile/params.go with a suitable hex address.
	// GasRevenueAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
)

type InitialGasRevenueConfig struct {
	BlackholePercentage  *big.Int `json:"blackholePercentage"`
	CoinbasePercentage   *big.Int `json:"coinbasePercentage"`
	GasRevenuePercentage *big.Int `json:"gasRevenuePercentage"`
}

func (i *InitialGasRevenueConfig) Verify() error {
	// sum of percentages should be PercentageDenominator
	sum := new(big.Int).Add(i.BlackholePercentage, i.CoinbasePercentage)
	sum = new(big.Int).Add(sum, i.GasRevenuePercentage)
	if sum.Cmp(big.NewInt(PercentageDenominator)) != 0 {
		return fmt.Errorf("sum of percentages should be %d", PercentageDenominator)
	}
	return nil
}

func (c *InitialGasRevenueConfig) Equal(other *InitialGasRevenueConfig) bool {
	if other == nil {
		return false
	}

	return c.BlackholePercentage == other.BlackholePercentage &&
		c.CoinbasePercentage == other.CoinbasePercentage &&
		c.GasRevenuePercentage == other.GasRevenuePercentage
}

func (i *InitialGasRevenueConfig) Configure(state StateDB) {
	SetPercentage(state, 0, i.BlackholePercentage)
	SetPercentage(state, 1, i.CoinbasePercentage)
	SetPercentage(state, 2, i.GasRevenuePercentage)
}

// GasRevenueConfig implements the StatefulPrecompileConfig
// interface while adding in the GasRevenue specific precompile address.
type GasRevenueConfig struct {
	UpgradeableConfig
	InitialGasRevenueConfig *InitialGasRevenueConfig `json:"initialGasRevenueConfig"`
}

type SetPercentageInput struct {
	Target     []uint8
	Percentage []*big.Int
}

func init() {
	parsed, err := abi.JSON(strings.NewReader(GasRevenueRawABI))
	if err != nil {
		panic(err)
	}
	GasRevenueABI = parsed

	GasRevenuePrecompile = createGasRevenuePrecompile(GasRevenueAddress)
}

// NewGasRevenueConfig returns a config for a network upgrade at [blockTimestamp] that enables
// GasRevenue .
func NewGasRevenueConfig(blockTimestamp *big.Int, initialConfig *InitialGasRevenueConfig) *GasRevenueConfig {
	return &GasRevenueConfig{
		UpgradeableConfig:       UpgradeableConfig{BlockTimestamp: blockTimestamp},
		InitialGasRevenueConfig: initialConfig,
	}
}

// NewDisableGasRevenueConfig returns config for a network upgrade at [blockTimestamp]
// that disables GasRevenue.
func NewDisableGasRevenueConfig(blockTimestamp *big.Int) *GasRevenueConfig {
	return &GasRevenueConfig{
		UpgradeableConfig: UpgradeableConfig{
			BlockTimestamp: blockTimestamp,
			Disable:        true,
		},
	}
}

// Equal returns true if [s] is a [*GasRevenueConfig] and it has been configured identical to [c].
func (c *GasRevenueConfig) Equal(s StatefulPrecompileConfig) bool {
	// typecast before comparison
	other, ok := (s).(*GasRevenueConfig)
	if !ok {
		return false
	}
	// CUSTOM CODE STARTS HERE
	// modify this boolean accordingly with your custom GasRevenueConfig, to check if [other] and the current [c] are equal
	// if GasRevenueConfig contains only UpgradeableConfig  and AllowListConfig  you can skip modifying it.
	equals := c.UpgradeableConfig.Equal(&other.UpgradeableConfig)
	if !equals {
		return false
	}

	if c.InitialGasRevenueConfig == nil {
		return other.InitialGasRevenueConfig == nil
	}

	return c.InitialGasRevenueConfig.Equal(other.InitialGasRevenueConfig)
}

// String returns a string representation of the GasRevenueConfig.
func (c *GasRevenueConfig) String() string {
	bytes, _ := json.Marshal(c)
	return string(bytes)
}

// Address returns the address of the GasRevenue. Addresses reside under the precompile/params.go
// Select a non-conflicting address and set it in the params.go.
func (c *GasRevenueConfig) Address() common.Address {
	return GasRevenueAddress
}

// Configure configures [state] with the initial configuration.
func (c *GasRevenueConfig) Configure(_ ChainConfig, state StateDB, _ BlockContext) {
	// CUSTOM CODE STARTS HERE
	if c.InitialGasRevenueConfig != nil {
		c.InitialGasRevenueConfig.Configure(state)
	} else {
		// set default values
		SetPercentage(state, 0, big.NewInt(500))
		SetPercentage(state, 1, big.NewInt(250))
		SetPercentage(state, 2, big.NewInt(250))
	}
}

// Contract returns the singleton stateful precompiled contract to be used for GasRevenue.
func (c *GasRevenueConfig) Contract() StatefulPrecompiledContract {
	return GasRevenuePrecompile
}

// Verify tries to verify GasRevenueConfig and returns an error accordingly.
func (c *GasRevenueConfig) Verify() error {
	// CUSTOM CODE STARTS HERE
	// Add your own custom verify code for GasRevenueConfig here
	// and return an error accordingly
	if c.InitialGasRevenueConfig != nil {
		return c.InitialGasRevenueConfig.Verify()
	}
	return nil
}

func GetPercentage(stateDB StateDB, target uint8) *big.Int {
	return stateDB.GetState(GasRevenueAddress, common.BytesToHash(append([]byte("percentage"), target))).Big()
}

func GetBlackholePercentage(stateDB StateDB) *big.Int {
	return GetPercentage(stateDB, 0)
}

func GetCoinbasePercentage(stateDB StateDB) *big.Int {
	return GetPercentage(stateDB, 1)
}

func GetGasRevenuePercentage(stateDB StateDB) *big.Int {
	return GetPercentage(stateDB, 2)
}

func IsRegistered(stateDB StateDB, address common.Address) bool {
	return stateDB.GetState(GasRevenueAddress, common.BytesToHash(append([]byte("isRegistered"), address.Bytes()...))).Big().Cmp(common.Big1) == 0
}

func BalanceOf(stateDB StateDB, address common.Address) *big.Int {
	return stateDB.GetState(GasRevenueAddress, common.BytesToHash(append([]byte("balanceOf"), address.Bytes()...))).Big()
}

func SetPercentage(stateDB StateDB, target uint8, percentage *big.Int) {
	stateDB.SetState(GasRevenueAddress, common.BytesToHash(append([]byte("percentage"), target)), common.BigToHash(percentage))
}

func SetRegistered(stateDB StateDB, address common.Address) {
	stateDB.SetState(GasRevenueAddress, common.BytesToHash(append([]byte("isRegistered"), address.Bytes()...)), common.BigToHash(common.Big1))
}

// Use only in state_transition.go!
func SetBalanceOf(stateDB StateDB, address common.Address, balance *big.Int) {
	stateDB.SetState(GasRevenueAddress, common.BytesToHash(append([]byte("balanceOf"), address.Bytes()...)), common.BigToHash(balance))
}

func ResetBalance(stateDB StateDB, address common.Address) {
	stateDB.SetState(GasRevenueAddress, common.BytesToHash(append([]byte("balanceOf"), address.Bytes()...)), common.BigToHash(common.Big0))
}

// UnpackBalanceOfInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackBalanceOfInput(input []byte) (common.Address, error) {
	res, err := GasRevenueABI.UnpackInput("balanceOf", input)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackBalanceOf packs [contractAddress] of type common.Address into the appropriate arguments for balanceOf.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackBalanceOf(contractAddress common.Address) ([]byte, error) {
	return GasRevenueABI.Pack("balanceOf", contractAddress)
}

// PackBalanceOfOutput attempts to pack given balance of type *big.Int
// to conform the ABI outputs.
func PackBalanceOfOutput(balance *big.Int) ([]byte, error) {
	return GasRevenueABI.PackOutput("balanceOf", balance)
}

func balanceOf(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, BalanceOfGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the BalanceOfInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackBalanceOfInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	value := BalanceOf(accessibleState.GetStateDB(), inputStruct)

	packedOutput, err := PackBalanceOfOutput(value)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackGetPercentageInput attempts to unpack [input] into the uint8 type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetPercentageInput(input []byte) (uint8, error) {
	res, err := GasRevenueABI.UnpackInput("getPercentage", input)
	if err != nil {
		return uint8(0), err
	}
	unpacked := *abi.ConvertType(res[0], new(uint8)).(*uint8)
	return unpacked, nil
}

// PackGetPercentage packs [target] of type uint8 into the appropriate arguments for getPercentage.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetPercentage(target uint8) ([]byte, error) {
	return GasRevenueABI.Pack("getPercentage", target)
}

// PackGetPercentageOutput attempts to pack given percentage of type *big.Int
// to conform the ABI outputs.
func PackGetPercentageOutput(percentage *big.Int) ([]byte, error) {
	return GasRevenueABI.PackOutput("getPercentage", percentage)
}

func getPercentage(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, GetPercentageGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetPercentageInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetPercentageInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	// get the percentage from the state
	percentage := GetPercentage(accessibleState.GetStateDB(), inputStruct)

	packedOutput, err := PackGetPercentageOutput(percentage)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackIsRegisteredInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackIsRegisteredInput(input []byte) (common.Address, error) {
	res, err := GasRevenueABI.UnpackInput("isRegistered", input)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackIsRegistered packs [contractAddress] of type common.Address into the appropriate arguments for isRegistered.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackIsRegistered(contractAddress common.Address) ([]byte, error) {
	return GasRevenueABI.Pack("isRegistered", contractAddress)
}

// PackIsRegisteredOutput attempts to pack given registered of type bool
// to conform the ABI outputs.
func PackIsRegisteredOutput(registered bool) ([]byte, error) {
	return GasRevenueABI.PackOutput("isRegistered", registered)
}

func isRegistered(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, IsRegisteredGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the IsRegisteredInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackIsRegisteredInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	isRegistered := IsRegistered(accessibleState.GetStateDB(), inputStruct)

	packedOutput, err := PackIsRegisteredOutput(isRegistered)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// PackRegister packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackRegister() ([]byte, error) {
	return GasRevenueABI.Pack("register")
}

// PackRegisterOutput attempts to pack given success of type bool
// to conform the ABI outputs.
func PackRegisterOutput(success bool) ([]byte, error) {
	return GasRevenueABI.PackOutput("register", success)
}

func register(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, RegisterGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// no input provided for this function

	// get state of the caller
	state := accessibleState.GetStateDB().GetState(caller, common.Hash{})

	// if the state is 0, then the caller is not a contract
	if state.Big().Cmp(big.NewInt(0)) == 0 {
		return nil, remainingGas, ErrNotSmartContract
	}

	// check if already registered
	isRegistered := IsRegistered(accessibleState.GetStateDB(), caller)
	if isRegistered {
		return nil, remainingGas, ErrAlreadyRegistered
	}

	// register
	SetRegistered(accessibleState.GetStateDB(), caller)

	packedOutput, err := PackRegisterOutput(true)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackWithdrawInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackWithdrawInput(input []byte) (common.Address, error) {
	res, err := GasRevenueABI.UnpackInput("withdraw", input)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackWithdraw packs [recipient] of type common.Address into the appropriate arguments for withdraw.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackWithdraw(recipient common.Address) ([]byte, error) {
	return GasRevenueABI.Pack("withdraw", recipient)
}

// PackWithdrawOutput attempts to pack given amount of type *big.Int
// to conform the ABI outputs.
func PackWithdrawOutput(amount *big.Int) ([]byte, error) {
	return GasRevenueABI.PackOutput("withdraw", amount)
}

func withdraw(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, WithdrawGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the WithdrawInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackWithdrawInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	stateDB := accessibleState.GetStateDB()

	// check if caller is registered
	if !IsRegistered(stateDB, caller) {
		return nil, remainingGas, ErrNotRegistered
	}

	value := BalanceOf(stateDB, caller)
	stateDB.SubBalance(GasRevenueAddress, value)
	stateDB.AddBalance(inputStruct, value)

	ResetBalance(stateDB, caller) // sets to 0

	packedOutput, err := PackWithdrawOutput(value)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createGasRevenuePrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
// Access to the getters/setters is controlled by an allow list for [precompileAddr].
func createGasRevenuePrecompile(precompileAddr common.Address) StatefulPrecompiledContract {
	var functions []*statefulPrecompileFunction

	methodBalanceOf, ok := GasRevenueABI.Methods["balanceOf"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodBalanceOf.ID, balanceOf))

	methodGetPercentage, ok := GasRevenueABI.Methods["getPercentage"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodGetPercentage.ID, getPercentage))

	methodIsRegistered, ok := GasRevenueABI.Methods["isRegistered"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodIsRegistered.ID, isRegistered))

	methodRegister, ok := GasRevenueABI.Methods["register"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodRegister.ID, register))

	methodWithdraw, ok := GasRevenueABI.Methods["withdraw"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodWithdraw.ID, withdraw))

	// Construct the contract with no fallback function.
	contract := newStatefulPrecompileWithFunctionSelectors(nil, functions)
	return contract
}
